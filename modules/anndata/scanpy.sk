pipeman.addTargets(
  scanpy__dir = "anndata/scanpy", 
  scanpy__pipeTarget = "{counts_umi__pipeTarget}/{scanpy__dir}",
  scanpy__pipeSample = "{scanpy__pipeTarget}/{{sample_name}}", )

file10X=['matrix.mtx','genes.tsv','barcodes.tsv']
fileUM=['counts.tsv.gz']

rule scanpy__readData10X:
  input:
    matrix = "samples/matrix.mtx",
    genes  = "samples/genes.txt",
    bc     = "samples/barcodes.tsv"
  output:
    annot  = temp(f"{scanpy__pipeSample}_10X.h5ad")
  run:
    exshell(cmd="", **vars())

    import scanpy as sc
    import pandas as pd
    sconf = config.pipeline.modules.anndata.scanpy
    sc.settings.verbosity = sconf.verbosity

    adata = sc.read(input.matrix, cache=True).T
    adata.var_names = pd.read_csv(input.genes, header=None, sep='\t')[1]
    adata.obs_names = pd.read_csv(input.bc, header=None)[0]
    adata.var_names_make_unique()
    adata.write(output.annot)

rule scanpy__readDataUMI:
  input:
    counts  = f"{counts_umi__pipeSample}.counts.tsv.gz"
  output:
    annot = temp(f"{scanpy__pipeSample}_umi.h5ad")
  run:
    exshell(cmd="", **vars())

    import scanpy as sc
    import pandas as pd
    sconf = config.pipeline.modules.anndata.scanpy
    sc.settings.verbosity = sconf.verbosity

    adata = sc.read_umi_tools(input.counts, dtype='float32')
    adata.var_names_make_unique()
    adata.write(output.annot)

rule scanpy__firstFilter:
  input:
    annot = f"{scanpy__pipeSample}_umi.h5ad"
  output:
    annot = temp(f"{scanpy__pipeSample}_ff.h5ad")
  run:
    exshell(cmd="", **vars())
    import scanpy as sc
    sconf = config.pipeline.modules.anndata.scanpy

    adata = sc.read(input.annot)
    sc.pp.filter_cells(adata, min_genes=sconf.firstFilter.minGenes)
    sc.pp.filter_genes(adata, min_cells=sconf.firstFilter.minCells)
    adata.write(output.annot)

rule scanpy__firstPlot:
  input:
    annot = f"{scanpy__pipeSample}_ff.h5ad"
  output:
    annot = temp(f"{scanpy__pipeSample}_fp.h5ad")
  run:
    exshell(cmd="", **vars())
    import scanpy as sc
    import numpy as np
    import matplotlib
    matplotlib.use('Agg')
    sc.settings.autosave = True

    adata = sc.read(input.annot)
    mito_genes= [name for name in adata.var_names if name.startswith('MT-') ]
    adata.obs['percent_mito'] = (
                                 np.sum(adata[:, mito_genes].X, axis=1).A1
                               / np.sum(adata.X, axis=1).A1 )
    adata.obs['n_counts'] = adata.X.sum(axis=1).A1
    sc.pl.violin(
      adata, 
      ['n_genes', 'n_counts', 'percent_mito'],
      jitter=0.4,
      multi_panel=True,
      save='_filter.pdf')
    adata.write(output.annot)

rule scanpy__secondFilter:
  input:
    annot = f"{scanpy__pipeSample}_fp.h5ad"
  output:
    annot = temp(f"{scanpy__pipeSample}_sf.h5ad")
  run:
    exshell(cmd="", **vars())

    import scanpy as sc
    sconf = config.pipeline.modules.anndata.scanpy

    adata = sc.read(input.annot)
    adata = adata[adata.obs['n_genes'] < sconf.secondFilter.nGenes, :]
    adata = adata[adata.obs['percent_mito'] < sconf.secondFilter.percentMito, :]
    adata.raw = adata
    adata.write(output.annot)

rule scanpy__normalize:
  input:
    annot = f"{scanpy__pipeSample}_sf.h5ad"
  output:
    annot = temp(f"{scanpy__pipeSample}_n.h5ad")
  run:
    exshell(cmd="", **vars())

    import scanpy as sc
    ruleConf = config.pipeline.modules.anndata.scanpy.normalization

    adata = sc.read(input.annot)
    sc.pp.normalize_per_cell(adata, counts_per_cell_after=ruleConf.countPerCellAfter)
    sc.pp.log1p(adata)

    adata.raw = adata

    sc.pp.highly_variable_genes(
      adata, 
      min_mean= ruleConf.highVarGen_minMean, 
      max_mean= ruleConf.highVarGen_maxMean, 
      min_disp= ruleConf.highVarGen_minDisp)
    if ruleConf.keepOnlyHVG:
      adata = adata[:, adata.var['highly_variable']]

    sc.pp.regress_out(adata, ['n_counts', 'percent_mito'] )
    sc.pp.scale(adata, max_value=ruleConf.scale_maxVal )

    adata.write(output.annot)

hsapiensCcGenesFile = "hsapiens_cell_cycle_genes.txt"
rule scanpy__cellCycleScorePca:
  input:
    annot   = f"{scanpy__pipeSample}_n.h5ad",
    ccGenes = hsapiensCcGenesFile
  output:
    annot   = temp(f"{scanpy__pipeSample}_cc.h5ad")
  run:
    exshell(cmd="", **vars())

    import scanpy as sc
    import matplotlib
    matplotlib.use('Agg')

    ruleConf = config.pipeline.modules.anndata.scanpy.cellCycleScore
    sc.settings.autosave=True

    adata = sc.read(input.annot)
    cc_genes = [ gene.strip() for gene in open(input.cc_genes) ]
    s_genes   = [g for g in cc_genes[:43] if g in adata.var_names]
    g2m_genes = [g for g in cc_genes[43:] if g in adata.var_names]

    sc.tl.score_genes_cell_cycle(adata, s_genes=s_genes, g2m_genes=g2m_genes, random_state=1)

    sc.tl.pca(adata, svd_solver='arpack', use_highly_variable=ruleConf.useOnlyHighlyVariable)
    sc.pl.pca_scatter(adata, color='phase', save='_beforeCC.pdf')
    adata.write(output.annot)

rule scanpy__cellCycleScoreReg:
  input:
    annot = f"{scanpy__pipeSample}_cc.h5ad",
  output:
    annot = temp(f"{scanpy__pipeSample}_sr.h5ad")
  run:
    exshell(cmd="", **vars())

    import scanpy as sc
    import matplotlib
    matplotlib.use('Agg')
    ruleConf = config.pipeline.modules.anndata.scanpy.cellCycleScore
    sc.settings.autosave=True

    adata = sc.read(input.annot)
    if ruleConf.regressOnCellCycle:
      sc.pp.regress_out(adata, ['S_score', 'G2M_score'])
      sc.pp.scale(adata)
      sc.tl.pca(adata, svd_solver='arpack', use_highly_variable=ruleConf.useOnlyHighlyVariable)
      sc.pl.pca_scatter(adata, color='phase', save='_afterCC.pdf')
    adata.write(output.annot)

rule scanpy__pcaElbowPlot:
  input:
    annot = f"{scanpy__pipeSample}_sr.h5ad",
  output:
    annot = temp(f"{scanpy__pipeSample}_pc.h5ad")
  run:
    exshell(cmd="", **vars())
    import scanpy as sc
    import matplotlib
    matplotlib.use('Agg')
    sc.settings.autosave = True

    adata = sc.read(input.annot)
    sc.pl.pca_variance_ratio(adata, log=True, save='.pdf')
    adata.write(output.annot)

rule scanpy__louvain:
  input:
    annot = f"{scanpy__pipeSample}_pc.h5ad",
  output:
    annot = temp(f"{scanpy__pipeSample}_lv.h5ad")
  run:
    exshell(cmd="", **vars())
    ruleConf = config.pipeline.modules.anndata.scanpy.louvain

    import scanpy as sc
    import louvain

    adata = sc.read(input.annot)
    sc.pp.neighbors(adata, n_neighbors=ruleConf.nNeighbors)
    sc.tl.louvain(adata,resolution=ruleConf.resolution)
    adata.write(output.annot)

rule scanpy__tsne:
  input:
    annot = f"{scanpy__pipeSample}_lv.h5ad",
  output:
    annot = temp(f"{scanpy__pipeSample}_ts.h5ad")
  run:
    exshell(cmd="", **vars())
    ruleConf = config.pipeline.modules.anndata.scanpy.tsne

    import scanpy as sc
    import igraph as ig
    import matplotlib
    matplotlib.use('Agg')
    sc.settings.autosave = True

    adata = sc.read(input.annot)
    sc.tl.tsne(adata, random_state=ruleConf.randomState, n_pcs=ruleConf.nPC)
    sc.pl.tsne(adata, color='louvain', save='.pdf')
    adata.write(output.annot)

rule scanpy__umap:
  input:
    annot = f"{scanpy__pipeSample}_ts.h5ad",
  output:
    annot = temp(f"{scanpy__pipeSample}_um.h5ad")
  run:
    exshell(cmd="", **vars())

    import scanpy as sc
    import igraph as ig
    import matplotlib
    matplotlib.use('Agg')
    sc.settings.autosave = True

    adata = sc.read(input.annot)
    sc.tl.umap(adata)
    sc.pl.umap(adata, color='louvain', save='.pdf')
    adata.write(output.annot)

rule scanpy__clusterMarkers:
  input:
    annot = f"{scanpy__pipeSample}_um.h5ad",
  output:
    annot = temp(f"{scanpy__pipeSample}_cm.h5ad"),
    csv   = f"{scanpy__pipeSample}_cm.csv"
  run:
    exshell(cmd="", **vars())
    ruleConf = config.pipeline.modules.anndata.scanpy.clusterMarkers

    import scanpy as sc
    import pandas as pd
    import matplotlib
    matplotlib.use('Agg')
    sc.settings.autosave = True

    adata = sc.read(input.annot)
    sc.tl.rank_genes_groups(
      adata, 
      'louvain', 
      method=ruleConf.method, 
      use_raw=ruleConf.useRaw)
    sc.tl.filter_rank_genes_groups(
      adata, 
      use_raw=ruleConf.useRaw,
      log=ruleConf.logValue, 
      min_in_group_fraction=ruleConf.minInGroupFraction,
      min_fold_change=ruleConf.minFoldChange,
      max_out_group_fraction=ruleConf.maxOutGroupFraction)
    sc.pl.rank_genes_groups(adata, n_genes=ruleConf.plot_nGenes, save='.pdf')
    adata.write(output.annot)

    myDf_n = pd.DataFrame(adata.uns['rank_genes_groups']['names'])
    myDf_s = pd.DataFrame(adata.uns['rank_genes_groups']['scores'])
    myDf_n.columns = [myDf_n.columns + '_n']
    myDf_s.columns = [myDf_s.columns + '_s']
    mrg = []
    i = 0
    for col in myDf_n.columns:
      mrg.append(
        pd.DataFrame(myDf_n[col])
         .join(pd.DataFrame(myDf_s[myDf_s.columns[i]])))
      i+=1
    clustMarks = pd.concat([m for m in mrg], axis=1, join='inner')
    clustMarks.to_csv(output.csv, index=True, header=True)

rule scanpy__interestingGenes:
  input:
    annot = f"{scanpy__pipeSample}_cm.h5ad",
    csv   = f"{scanpy__pipeSample}_cm.csv"
  output:
    genes = temp(f"{scanpy__pipeSample}_interestingGenes.txt"),
  run:
    exshell(cmd="", **vars())

    import scanpy as sc
    import pandas as pd
    import numpy as np
    import matplotlib
    matplotlib.use('Agg')
    sc.settings.autosave = True

    adata = sc.read(input.annot)
    clustMarks = pd.read_csv(input.csv, index_col=0)

    myGns = []
    for i in range(0 ,len(clustMarks.columns), 2):
      myGns.append([ g for g in clustMarks[ clustMarks.columns[i] ] ])
    myGns = np.unique(myGns)

    markGenes = pd.DataFrame()
    for g in myGns:
      tmp = []
      for j in range(0, clustMarks.shape[1], 2):
        sel = np.ravel(clustMarks[ clustMarks.columns[j] ]==g)
        if clustMarks.loc[sel].shape[0]==0:
          i=clustMarks.shape[0]
        else:
          i=clustMarks.loc[sel].index[0]
        tmp.append(i)
      tmp.sort()
      markGenes = markGenes.append(pd.Series(tmp), ignore_index=True)

    markGenes.set_index(myGns, inplace=True)
    markGenes['d'] = markGenes[ markGenes.columns[1] ] - markGenes[ markGenes.columns[0] ]
    markGenes.sort_values(by=['d'], inplace=True, ascending=False)

    intGenes = list(markGenes.loc[markGenes['d']==100].index)
    pd.DataFrame(intGenes).to_csv(output.genes, index=False, header=False)

    sc.pl.violin(adata, intGenes, groupby='louvain', save='_group_comparison.pdf')
