pipeman.updateWildcardConstraints(
  prj = "\w+"
)

rule seqrun__qc:
  input: 
    seqrun__config,
    prjsQc = lambda x: seqrun__projectsQc()
  output:
    "qc.done"
  run:
    cmd = """
      touch {output}
    """
    exshell(**vars())

# ------------------------------------
# QC on all sequencing run's projects
# ------------------------------------
rule seqrun__projectQC:
  """ Produces a single project's QC """
  input:
    prjSamplesMetaTarget = seqrun__projectSamplesMetaTarget
  output:
    qc = seqrun__projectQcTarget,
  run:
    pipeline = seqrun__projectPipelineDft(wildcards.prj)
    target = project__pipelineQcTarget(pipeline, formatted=True, **wildcards)
    targetPath = seqrun__projectQcPath(wildcards.prj)
    cmd = core__subCmd(
      pipeline=pipeline,
      project=wildcards.prj,
      target=target)
    ## Note: Here I don't have another rule for linking the file, 
    #  else the subpipeline info output will overrid the linking
    #  rule's.
    cmd += f"""
      ln {targetPath} {output.qc}
    """
    exshell(**vars(), isSubCmd=True)

rule seqrun__projectSamplesMeta:
  output:
    prjSamplesMetaTarget = seqrun__projectSamplesMetaTarget,
    prjSamplesMetaPath = project__samplesTargetPath() 
  run:
    pipeline = seqrun__projectPipelineDft(wildcards.prj)
    target   = project__samplesTarget
    cmd = core__subCmd(
      pipeline=pipeline,
      project=wildcards.prj,
      target=target)
    ## Note: Here I don't have another rule for linking the file, 
    #  else the subpipeline info output will overrid the linking
    #  rule's.
    cmd += f"""
      ln {output.prjSamplesMetaPath} {output.prjSamplesMetaTarget}
    """
    exshell(**vars(), isSubCmd=True)

localrules: seqrun__projectSamplesMeta, seqrun__projectQC
