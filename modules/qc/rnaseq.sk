pypette.includeModules("core/lang.py")

rule qc_rnaseq__multiqc:
  input:
    fastqcs   = pypette.input(
                  fastq_qc__readZip, 
                  derefKwargs=['sample_name', 'sample_run']),
    readDists = pypette.input(
                  f"{bam__sampleTarget}.read_distribution",
                  derefKwargs=['sample_name',]),
    inferExp  = pypette.input(
                  f"{bam__sampleTarget}.inferExperiment",
                  derefKwargs=['sample_name',]),
    bamCounts = pypette.input(
                  f"{counts__sampleTarget}.counts.summary",
                  derefKwargs=['sample_name',]),
    bamstat   = pypette.input(
                  f"{bam__sampleTarget}.bamstats",
                  derefKwargs=['sample_name',]),
    starLogs  = pypette.input(
                  f"{bam_mapper__pipeTarget}/{{sample_name}}.Log.final.out",
                  derefKwargs=['sample_name', 'sample_run']),
    trimlog   = pypette.input(
                  f"{fastq__pipeTarget}{{sample_name}}_trim.log",
                  requiredKeys=['procTrimming'],
                  derefKwargs=['sample_name', 'sample_run'])
  output:
    report   =           f"{bam__pipeTarget}multiqc_report.html",
    data     = directory(f"{bam__pipeTarget}multiqc_data")
  run:
    outDir = bam__pipeTarget.format(**wildcards)
    cmd  = f"""
      export {core_lang__dft}
      multiqc              \
        -f                 \
        -o {outDir}        \
        {input} 
    """
    exshell(**vars())

ruleorder: qc_rnaseq__multiqc > samples__all > samples__runs
