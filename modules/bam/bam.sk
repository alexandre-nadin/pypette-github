pypette.includeModules(
  "genomes/genome.sk",
  "genomes/annotation.sk",
  "genomes/exome.sk")

# -----------------
# Mark Duplicates
# -----------------
bam__sampleMarkdupPrefix = "{anyprefix}markdup/{sample_name}"
rule bam__markDuplicates:
  input: 
    bam     = "{anyprefix}{sample_name}.bam"
  output: 
    bam     = pypette.temp(f"{bam__sampleMarkdupPrefix}.bam"    ),
    bai     = pypette.temp(f"{bam__sampleMarkdupPrefix}.bai"    ),
    metrics =      f"{bam__sampleMarkdupPrefix}.metrics"
  run:
    cmd = """
      picard MarkDuplicates                           \
      I={input.bam}                                   \
      O={output.bam}                                  \
      CREATE_INDEX=true                               \
      VALIDATION_STRINGENCY=SILENT                    \
      REMOVE_DUPLICATES=false                         \
      ASSUME_SORTED=true                              \
      METRICS_FILE={output.metrics}                    
    """
    exshell(**vars())

ruleorder: bam__markDuplicates > bam__makeIndex > samples__runs

# --------------
# Sorting Bams
# --------------
rule bam__sortSamplePicard:
  input: 
    bam = "{anyprefix}{sample_name}.bam"
  output: 
    bam = pypette.temp("{anyprefix}sorted/picard/{sample_name}.bam"),
  run:
    cmd = """
      picard SortSam          \
        I={input.bam}         \
        SORT_ORDER=coordinate \
        O={output.bam}
    """
    exshell(**vars())

rule bam__sortSampleSamtools:
  input: 
    bam = "{anyprefix}{sample_name}.bam"
  output: 
    bam = pypette.temp("{anyprefix}sorted/samtools/{sample_name}.bam")
  run:
    bwa = pypette.config.pipeline.modules.mapping.aligner
    cmd = """
      samtools view          \
        -Su {input}          \
    | samtools sort          \
        -T {output.bam}.tmp  \
        -@ {bwa.cores}       \
        -o {output.bam}      \
        -
    """
    exshell(**vars())

ruleorder: samples__runs > bam__sampleStats > bam__sortSampleSamtools > bam__markDuplicates

# -----------
# Bam Stats
# -----------
rule bam__sampleStats:
  input:
    bam   = "{someprefix}.bam"
  output:
    stats = "{someprefix}.bamstats"
  run:
    cmd = """
      bamtools stats       \
        -in {input.bam}    \
        > {output.stats}
    """
    exshell(**vars())

ruleorder: samples__all > bam__sampleStats

# ------------
# Merge BAMs
# ------------
ruleorder: bam__markDuplicates > bam__sortSamplePicard > bam__sortSampleSamtools > bam__mergeSample
rule bam__mergeSample:
  input:
    bam = pypette.input(
            bam__sample, 
            derefKwargs = ['sample_run',],
            withResult=True)
  output:
    bam = pypette.temp(f"{bam_mapper__pipeTarget}/merged/{{sample_name}}.bam")
  run:
    if len(input.bam) > 1:
      mergePrefixes = picardMergeInputString(input.bam)
      cmd = """
        picard MergeSamFiles                            \
          {mergePrefixes}                               \
          O={output.bam}                                \
          CREATE_INDEX=true                             \
          MSD=true                                      \
          TMP_DIR=$TMPDIR                               \
          VALIDATION_STRINGENCY=SILENT                  \
         > {output.bam}.log
      """
    else:
      cmd = """
        ln {input.bam} {output.bam}
      """
    exshell(**vars())

ruleorder: samples__runs > bam__mergeSample 

rule bam__makeIndex:
  input:       
         "{someprefix}.bam"
  output: 
    pypette.temp("{someprefix}.bai")
  run:
    cmd = """
      picard BuildBamIndex I={input} O={output}
    """
    exshell(**vars())

rule bam__hsMetrics:
  input:  
    bam = "{someprefix}.bam",
    fa  = genome__ucscFasta(),
    fai = genome__ucscFastaIdx(),
  output: 
    "{someprefix}_hsMetrics.txt"
  run:
    baitIntervals   = exome__baitIntervals(sharedDir=True)
    targetIntervals = exome__targetIntervals(sharedDir=True)
    cmd = """
      picard CollectHsMetrics          \
        BI={baitIntervals}             \
        TI={targetIntervals}           \
        I={input.bam}                  \
        O={output}                     \
        R={input.fa}                   \
        VALIDATION_STRINGENCY=SILENT
    """
    exshell(**vars())

ruleorder: samples__all > bam__hsMetrics

rule bam__wgsMetrics:
  input:  
    bam = "{someprefix}.bam",
    fa  = genome__ucscFasta(),
    fai = genome__ucscFastaIdx(),
  output: 
    "{someprefix}_wgsMetrics.txt"
  run:
    cmd = """
      picard CollectWgsMetrics         \
        I={input.bam}                  \
        O={output}                     \
        R={input.fa}                   \
        VALIDATION_STRINGENCY=SILENT
    """
    exshell(**vars())

ruleorder: samples__all > bam__wgsMetrics

rule bam__flagstat:
  input:  "{someprefix}.bam"
  output: "{someprefix}_flagstat.txt"
  run:
    cmd = """
      samtools flagstat {input} > {output}
    """
    exshell(**vars())

# -------------------
# Base Recalibration
# -------------------
rule bam__baseRecalibrator:
  input: 
    bam     = "{anyprefix}{sample_name}.bam",
    bai     = "{anyprefix}{sample_name}.bai",
    fa      = lambda x: genome__ucscFasta()
  output: 
    recalib = "{anyprefix}{sample_name}_recalibration_report.grp"
  run:
    gnmName = project__speciesGenomeName()
    if gnmName == "hs37d5":
      gnmName = "hg19"
    knownSitesOpt = ''.join([ f" -knownSites {site}" 
                              for site in genome__baseRecalibSites(gnmName)
                            ])
    cmd = f"""
      gatk                 \
       -T BaseRecalibrator \
       -R {input.fa}       \
       -I {input.bam}      \
       {knownSitesOpt}     \
       -o {output.recalib}
    """
    exshell(**vars())

bam__sampleRecalibPrefix = "{anyprefix}recalib/{sample_name}"
rule bam__baseRecalibrate:
  input:
    recalib = "{anyprefix}{sample_name}_recalibration_report.grp",
    bam     = "{anyprefix}{sample_name}.bam",
    bai     = "{anyprefix}{sample_name}.bai",
    fa      = lambda x: genome__ucscFasta()
  output:
    bam     = f"{bam__sampleRecalibPrefix}.bam"
  run:
    cmd = """
      gatk                    \
        -T PrintReads         \
        -R {input.fa}         \
        -I {input.bam}        \
        -BQSR {input.recalib} \
        -o {output.bam}
    """
    exshell(**vars())

ruleorder: bam__baseRecalibrate > bam__makeIndex
