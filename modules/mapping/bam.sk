bam__dir = "{project}/mapping"
bam__chunk_format = bam__dir + "/{sample_run}/{sample_name}/{sample_name}_{sample_number}_{sample_lane}_{sample_chunknb}{preprocesses}"
bam__merged_format= "BAM/{sample_name}{preprocesses}"

# ------------
# Merge BAMs
# ------------
MERGE_CMD = "condactivate; picard MergeSamFiles"
rule bam__merge_sample_bam_chunks:
  input:
    #bam = lambda wildcards: csvmap__formatStrFromQueryDict(
    #            csvmap=fastq_csvmap, 
    #            str_format=bam__chunk_format + '.bam',
    #            **wildcards)
    bam = lambda wildcards: 
      fastq__queryFastqSamples(bam__chunk_format + '.bam', **wildcards)
  output:
    primary= bam__merged_format + "{process}.bam",
    bai= bam__merged_format + "{process}.bai"
  wildcard_constraints:
    process="(\.merged)?"
  run:
    shell("""
      mkdir -p BAM  # > {o[primary]}.log # DRY_RUN
      if [[ `wc -w <<<"{i[bam]}"` -gt 1 ]]; then
        {merge_command} {merge_prefixes} \
          O={o[primary]}                 \
          CREATE_INDEX=true              \
          MSD=true                       \
          TMP_DIR=$TMPDIR                \
          VALIDATION_STRINGENCY=SILENT   \
         > {o[primary]}.log
      else
          link_install {i[bam]} {o[primary]} # >> {o[primary]}.log # DRY_RUN
          ORIG_BAI=$(sed 's/bam/bai/g' <<< {i[bam]})
          echo "[DOING else]"
          [ -e $ORIG_BAI ] \
            && link_install -f $ORIG_BAI $(sed 's/bam/bai/g' <<< {o[primary]}) \
            || echo WARNING bai file $ORIG_BAI not found \ 
            >&2 # >> {o[primary]}.log # DRY_RUN
      fi  
    """.format(i=input, o=output, merge_command=MERGE_CMD, merge_prefixes=" ".join([ "I=" + _prefix for _prefix in input.bam ])))
