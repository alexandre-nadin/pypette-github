include: 'mapping.py'

mapping__relDir       = "mapped/" + mapping__alignerDir()
mapping__sampleDir    = fastq_merge__dir + "/" + mapping__relDir
mapping__samplePrefix = mapping__sampleDir + "/{sample_name}"
mapping__sample       = mapping__samplePrefix + ".bam"

mapping__dir    = "{sample_name}/" + mapping__relDir

mapping__mergedSamplePrefix = mapping__dir + "/merged/{sample_name}"
mapping__mergedSample = mapping__mergedSamplePrefix + ".bam"
mapping__mergedSampleStats = mapping__mergedSamplePrefix + ".bamstats"

# Note: Include the aligner found in pipeline configuration file after this
#       file's variables, as aligner's rules should depend on the variables 
#       declared above.
mapping__includeAlignerModule()


# -----------
# Bam Stats
# -----------
rule mapping__mergedSampleStatsAll:
  input:
    samples_stats = lambda wildcards:
      fastq__mapStringSamples(mapping__mergedSampleStats, **wildcards)
  output:
    primary = "mapping__mergedSampleStatsAll.done"
  run:
    touch(output)

pipeman.toClean("mapping_*.done")

rule mapping__sampleStats:
  input:
    bam = "{path}.bam"
  output:
    primary = "{path}.bamstats"
  run:
    cmd = """
      bamtools stats       \
        -in {input.bam}    \
        > {output.primary}
    """
    exshell(input, output, cmd, **wildcards)

# ------------
# Merge BAMs
# ------------
MERGE_CMD = "condactivate; picard MergeSamFiles"
rule mapping__mergeSample:
  input:
    bam = lambda wildcards: 
      fastq__mapStringSamples(mapping__sample, **wildcards)
  output:
    primary = mapping__mergedSample,
    bai     = mapping__mergedSamplePrefix + ".bai"
  run:
    if len(input.bam) > 1:
      cmd = """
        {merge_command} {merge_prefixes}                \
          O={output.primary}                            \
          CREATE_INDEX=true                             \
          MSD=true                                      \
          TMP_DIR=$TMPDIR                               \
          VALIDATION_STRINGENCY=SILENT                  \
         > {output.primary}.log
      """
    else:
      cmd = """
        ln.rel -f {input.bam} {output.primary} 
        ORIG_BAI=$(sed 's/bam$/bai/g' <<< {input.bam})
        if [ -e $ORIG_BAI ]; then
          ln.rel -f                             \
            $ORIG_BAI                                 \
            $(sed 's/bam/bai/g' <<< {output.primary})
        else
          echo "WARNING bai file $ORIG_BAI not found" >&2
        fi
      """
    exshell(
      input, output, cmd,
      merge_command=MERGE_CMD, 
      merge_prefixes=picardMergeInputString(input.bam),
      **wildcards)

rule mapping__mergeSampleAll:
  input:
    bam = lambda wildcards: fastq__mapStringSamples(
            mapping__mergedSample, **wildcards)
  output:
    primary = "mapping__mergeSampleAll.done"
  run:
    touch(output)

def picardMergeInputString(inputs=[]):
  return " ".join([ "I={}".format(i) for i in inputs])
