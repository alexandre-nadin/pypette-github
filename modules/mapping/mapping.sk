include: 'mapping.py'

mapping__dir = "{preprocesses}mapping" 
mapping__aligner_dir = mapping__dir + "/" + mapping__getAligner()
mapping__sample_io = mapping__aligner_dir + "/{sample_name}/{sample_name}.bam"
mapping__sample_stats_io = mapping__sample_io + ".stats"

mapping__chunk_format = mapping__dir + "/{sample_run}/{sample_name}/{sample_name}_{sample_number}_{sample_lane}_{sample_chunknb}{preprocesses}"
mapping__merged_format= "BAM/{sample_name}{preprocesses}"

# -----------
# Bam Stats
# -----------
rule mapping__sampleStats_all:
  input:
    samples_stats = lambda wildcards:
      fastq__mapStringSamples(mapping__sample_stats_io, **wildcards)
  output:
    primary = mapping__aligner_dir + "/mapping__sampleStats_all.done"
  run:
    touch(output)

rule mapping__sampleStats:
  input:
    bam = mapping__sample_io 
  output:
    primary = mapping__sample_stats_io
  run:
    cmd = """
      bamtools stats -in {input.bam} \
       > {output.primary}
    """.format(input=input, output=output)
    exshell(input, output, cmd, **wildcards)

# ------------
# Merge BAMs
# ------------
MERGE_CMD = "condactivate; picard MergeSamFiles"
rule mapping__merge_sample_bam_chunks:
  input:
    bam = lambda wildcards: 
      fastq__queryFastqSamples(mapping__chunk_format + '.bam', **wildcards)
  output:
    primary= mapping__merged_format + "{process}.bam",
    bai= mapping__merged_format + "{process}.bai"
  wildcard_constraints:
    process="(\.merged)?"
  run:
    shell("""
      mkdir -p BAM  # > {o[primary]}.log # DRY_RUN
      if [[ `wc -w <<<"{i[bam]}"` -gt 1 ]]; then
        {merge_command} {merge_prefixes} \
          O={o[primary]}                 \
          CREATE_INDEX=true              \
          MSD=true                       \
          TMP_DIR=$TMPDIR                \
          VALIDATION_STRINGENCY=SILENT   \
         > {o[primary]}.log
      else
          link_install {i[bam]} {o[primary]} # >> {o[primary]}.log # DRY_RUN
          ORIG_BAI=$(sed 's/bam/bai/g' <<< {i[bam]})
          echo "[DOING else]"
          [ -e $ORIG_BAI ] \
            && link_install -f $ORIG_BAI $(sed 's/bam/bai/g' <<< {o[primary]}) \
            || echo WARNING bai file $ORIG_BAI not found \ 
            >&2 # >> {o[primary]}.log # DRY_RUN
      fi  
    """.format(i=input, o=output, merge_command=MERGE_CMD, merge_prefixes=" ".join([ "I=" + _prefix for _prefix in input.bam ])))
