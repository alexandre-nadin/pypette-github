include: 'mapping.py'

""" Allowed Sorting Processes """
sortingTools = ('picard', 'samtools')
pipeman.updateWildcardConstraints(
  procSorted = "(sorted/({})/)?".format("|".join(sortingTools)),
  procMarkDup = "(markdup/)?",
)

""" Sample Run Reads Output Targets """
mapping__relDir       = "mapped" + mapping__alignerDir(append=True)
mapping__sampleDir    = fastq_merge__dir + "/{procTrimming}" + mapping__relDir
mapping__samplePrefix = mapping__sampleDir + "/{sample_name}"
mapping__sample       = mapping__samplePrefix + ".bam"

mapping__sortedSamplePrefix = mapping__sampleDir + mapping__sorterDir(append=True) + "/{sample_name}"
mapping__sortedSample = mapping__sortedSamplePrefix + ".bam"

""" Sample Merged Bams Output Targets """
mapping__pipelineDir = "fastq/all/{procTrimming}" + mapping__relDir + "/merged/{procSorted}{procMarkDup}"
mapping__mergedSampleDir    = "samples/{sample_name}/" + mapping__pipelineDir 
mapping__mergedSamplePrefix = mapping__mergedSampleDir + "{sample_name}"
mapping__mergedSample       = mapping__mergedSamplePrefix + ".bam"
mapping__mergedSampleStats  = mapping__mergedSamplePrefix + ".bamstats"

# Note: Include the aligner found in pipeline configuration file after this
#       file's variables, as aligner's rules should depend on the variables 
#       declared above.
mapping__includeAlignerModule()

# -----------------
# Mark Duplicates
# -----------------
bam__sampleMarkdupPrefix = "{anyprefix}markdup/{sample_name}"
rule bam__markDuplicates:
  input: 
    bam     = "{anyprefix}{sample_name}.bam"
  output: 
    bam     = bam__sampleMarkdupPrefix + ".bam",
    bai     = bam__sampleMarkdupPrefix + ".bai",
    metrics = bam__sampleMarkdupPrefix + ".metrics"
  run:
    cmd = """
      picard MarkDuplicates                           \
      I={input.bam}                                   \
      O={output.bam}                                  \
      CREATE_INDEX=true                               \
      VALIDATION_STRINGENCY=SILENT                    \
      REMOVE_DUPLICATES=false                         \
      ASSUME_SORTED=true                              \
      METRICS_FILE={output.metrics}                    
    """
    exshell(input, output, cmd, **wildcards)

# --------------
# Sorting Bams
# --------------
rule mapping__sortSamplePicard:
  input:  "{anyprefix}{sample_name}.bam"
  output: "{anyprefix}sorted/picard/{sample_name}.bam",
  run:
    cmd = """
      picard SortSam          \
        I={input}             \
        SORT_ORDER=unsorted   \
        O={output}
    """
    exshell(input, output, cmd, **wildcards)

rule mapping__sortSampleSamtools:
  input:  "{anyprefix}{sample_name}.bam"
  output: "{anyprefix}sorted/samtools/{sample_name}.bam"
  run:
    cmd = """
      samtools view -Su {input}    \
       | samtools sort -o {output}  
    """
    exshell(input, output, cmd, **wildcards)

# -----------
# Bam Stats
# -----------
rule mapping__mergedSampleStatsAll:
  input:
    samples_stats = lambda wildcards:
      fastq__mapStringSamples(mapping__mergedSampleStats, **wildcards)
  output:
    primary = "mapping__mergedSampleStatsAll.done"
  run:
    touch(output)

pipeman.toClean("mapping_*.done")

rule mapping__sampleStats:
  input:
    bam = "{someprefix}.bam"
  output:
    primary = "{someprefix}.bamstats"
  run:
    cmd = """
      bamtools stats       \
        -in {input.bam}    \
        > {output.primary}
    """
    exshell(input, output, cmd, **wildcards)

# ------------
# Merge BAMs
# ------------
ruleorder: bam__markDuplicates > mapping__sortSamplePicard > mapping__sortSampleSamtools > mapping__mergeSample
rule mapping__mergeSample:
  input:
    bam = lambda wildcards: 
      fastq__mapStringSamples(mapping__sample, **wildcards)
  output:
    primary = mapping__mergedSample,
  run:
    if len(input.bam) > 1:
      cmd = """
        picard MergeSamFiles                            \
          {merge_prefixes}                              \
          O={output.primary}                            \
          CREATE_INDEX=true                             \
          MSD=true                                      \
          TMP_DIR=$TMPDIR                               \
          VALIDATION_STRINGENCY=SILENT                  \
         > {output.primary}.log
      """
    else:
      cmd = """
        ln.rel -f {input.bam} {output.primary} 
      """
    exshell(
      input, output, cmd,
      merge_prefixes=picardMergeInputString(input.bam),
      **wildcards)

rule mapping__mergeSampleAll:
  input:
    bam = lambda wildcards: fastq__mapStringSamples(
            mapping__mergedSample, **wildcards)
  output:
    primary = "samples/all/" + mapping__pipelineDir + "all.done" 
  run:
    touch(output)

rule bam__makeIndex:
  input:  "{someprefix}.bam"
  output: "{someprefix}.bai"
  run:
    cmd = """
      picard BuildBamIndex I={input} O={output}
    """
    exshell(input, output, cmd, **wildcards)

rule bam__hsMetrics:
  input:  "{someprefix}.bam"
  output: "{someprefix}_hsMetrics.txt"
  run:
    cmd = """
      picard CollectHsMetrics          \
        BI={baitIntervals}             \
        TI={targetIntervals}           \
        I={input}                      \
        O={output}                     \
        R={genomeFasta}                \
        VALIDATION_STRINGENCY=SILENT
    """
    exshell(
      input, output, cmd, **wildcards,
      genomeFasta = mapping__genomeFasta(),
      baitIntervals = exome__baitIntervals(), 
      targetIntervals = exome__targetIntervals())

bam__sampleHsMetrics = mapping__mergedSampleDir + "/merged/sorted/picard/markdup/{sample_name}_hsMetrics.txt"
rule bam__sampleHsMetricsAll:
  input:  lambda wildcards: fastq__mapStringSamples(bam__sampleHsMetrics, **wildcards)
  output: "bam__sampleHsMetricsAll.done"
  run:
    touch(output)

pipeman.toClean("bam_*.done")

