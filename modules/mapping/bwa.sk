include: 'mapping.sk'
BWA_CORES = 6
BWA_REFERENCE_GENOME = ""

ruleorder: bwa__align_bwa_mem_picard > bwa__align_bwa_mem_samtools
rule bwa__align_bwa_mem_samtools:
    input:
        # samples_map = fastq_samples_map,
        fastq_reads= lambda wildcards: csvmap__formatStrFromQueryDict(
                  csvmap=fastq_csvmap, 
                  str_format=fastq__chunk_format + ".fastq.gz",
                  **wildcards)
    output: 
        primary = mapping__chunk_format + "{process}.bam"
    wildcard_constraints:
         process="(\.bwa_mem_samtools)"
    shell:"""
       # echo PBS -N bwamem -l select=1:ncpus=$(CORES)
       condactivate #> {output[primary]}.out ## DRY_RUN
       bwa mem -M \
         -t {BWA_CORES} \
         {BWA_REFERENCE_GENOME} \
         {input[fastq_reads]} \
         | samtools view -Su - \
         | samtools sort -o {output[primary]}
     """

PICARD_SORTSAM_SORT_ORER = 'unsorted' # [ 'unsorted', 'queryname', 'coordinate', 'duplicate', 'unknown']
rule bwa__align_bwa_mem_picard:
    input:
        fastq_reads= lambda wildcards: csvmap__formatStrFromQueryDict(
                  csvmap=fastq_csvmap, 
                  str_format=fastq__chunk_format + ".fastq.gz",
                  **wildcards)
    output: 
        primary = mapping__chunk_format + "{process}.bam"
    wildcard_constraints:
         process="(\.bwa_mem_picard)"
    shell:"""
       # echo PBS -N bwamem -l select=1:ncpus=$(CORES)
       condactivate #> {output[primary]}.out ## DRY_RUN
       bwa mem -M \
         -t {BWA_CORES} \
         {BWA_REFERENCE_GENOME} \
         {input[fastq_reads]} \
        | picard SortSam \
            I=/dev/stdin \
            SORT_ORDER={PICARD_SORTSAM_SORT_ORER} \
            O={output[primary]}
     """
