include: "fastq.py"

# -------------------------------
# Wildcards Constraints
#
# Organization of the outputs follows a convention both in the naming of the 
# files as in their directories. As such, we define regex constraints on the rules' 
# wildcards. Those wildcards are defined outside of the rules, so they are 
# global to all the rules. Each constraint can then be overridden specifically 
# in the rule itself, the last declaration prevailing.
# -------------------------------------------------------------------
pipeman.updateWildcardConstraints(
  **FastqFile.regex_fields,
  preprocesses = "(/\w+/)*?",
  anyprefix    = ".*",
  someprefix   = ".+",
  extension    = "\.\w+",
)
   
# --------------------- 
# I/O files format
#
# Convention: 
#   - {preprocesses} should be present both in the input and output. Can be empty.
#   - {process} is only for outputs as it is about the process defined by the
#     current rule.
# --------------------- 
fastq__dir = "samples/{sample_name}/fastq"
fastq__rawFiles = "samples/rawFiles.txt"
fastq__mappedSamples     = "samples/samples{extension}"
fastq__mappedSamplesDft = "samples/samples.csv"

fastq__readDir     = fastq__dir + "/runs/{sample_run}"
fastq__chunkPrefix = fastq__readDir + "/{sample_chunkname}"
fastq__chunk       = fastq__chunkPrefix + "{sample_extension}"
fastq__readPrefix  = fastq__readDir + "/{sample_name}_{sample_read}"
fastq__read        = fastq__readPrefix + "{sample_extension}"

fastq__dirAll = "samples/all/fastq"

pipeman.include("merge.sk")
pipeman.include("qc.sk")
pipeman.include("trimming.sk")
pipeman.include("adapter.sk")

ruleorder: fastq_trimming__trimmomatic > fastq_merging__mergeReads

# ---------------------
# Mapping fastq files
# ---------------------
rule fastq__mapRawFiles:
  """
  Find all the fastq files in the RUN directories specified in the 
  configuration.
  """
  input:
    configs  = config__config_files
  output: 
    primary  = fastq__rawFiles
  run:
    runs = fastq__runsPathsProject(pipeman.project)
    cmd = """
      find -L {runs} -name '*.fastq.gz' > {output}
    """
    shell(cmd)

rule fastq__mapSamples:
  """   
  Maps all the illumina filenames' metadata in a file.
  """
  input: 
    file    = fastq__rawFiles
  output: 
    primary = fastq__mappedSamples
  run:
    """ File Output Header """
    sample_lines = [ FastqFile.fieldNames() ]
    with open(input.file, 'r') as fastq_files:
      """ Mapped Samples Lines """
      sample_lines.extend(list(map(fastq__mapFilename, fastq_files)))

    """ Write Output """
    with open(output.primary, 'a') as fmap:
      fmap.write(
        pipeman.samples.listsToSamplesheet(
          sample_lines, 
          pipeman.sampleExtensions[wildcards.extension]))

# -----------------
# Link fastq reads
# -----------------
rule fastq__linkRead:
  """
  Links original fastq file to the project directory.
  """
  input:
    fastq_read = lambda wildcards:
      fastq__mapStringSamples("{sample_path}", **wildcards)
  output: 
    primary    = fastq__chunk
  shell:"""
    ln.rel {input.fastq_read} {output.primary} 
  """

rule fastq__linkReads_all:
  input: 
    fastq_files = lambda wildcards: 
      fastq__mapStringSamples(fastq__chunk, **wildcards)
  output: fastq__dirAll + "/linkReads.all"
  run:
    touch(output)

localrules: fastq__linkRead

   
# ---------
# Cleaning
# ---------
pipeman.toClean("fastq_*.done")
