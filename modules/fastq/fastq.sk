include: "fastq.py"

pipeman.updateWildcardConstraints(
  **FastqFile.regex_fields,
  preprocesses = "(/\w+/)*?",
  anyprefix    = ".*",
  someprefix   = ".+",
  extension    = "\.\w+",
)


fastq__dir = "samples/{sample_name}"
fastq__rawFiles = "samples/rawFiles.txt"
fastq__mappedSamples     = "samples/samples{extension}"
fastq__mappedSamplesDft = "samples/samples.csv"

fastq__sampleRunDir   = fastq__dir + "/runs/{sample_run}/fastq"

fastq__chunkPrefix    = fastq__sampleRunDir + "/{sample_chunkname}"
fastq__chunk          = fastq__chunkPrefix + "{sample_extension}"
fastq__readPrefix     = fastq__sampleRunDir + "/{procFastqMerge}{procTrimming}{sample_name}_{sample_read}"
fastq__read           = fastq__readPrefix + "{sample_extension}"

fastq__samplesDir     = "samples/all/fastq"
fastq__samplesRunDir  = "samples/all/runs/{sample_run}/fastq"
fastq__samplesRunsDir = "samples/all/runs/all/fastq"

pipeman.include("merge.sk")
pipeman.include("trimming.sk")
pipeman.include("qc.sk")
pipeman.include("adapter.sk")
fastq__procs = "{procFastqMerge}{procTrimming}"

ruleorder: fastq_trimming__bbduk > fastq_trimming__trimmomatic > fastq_trimming__cutadapt > fastq_merging__mergeReads

# ---------------------
# Mapping fastq files
# ---------------------
rule fastq__mapRawFiles:
  """
  Find all the fastq files in the RUN directories specified in the 
  configuration.
  """
  input:
    configs  = config__config_files
  output: 
    primary  = fastq__rawFiles
  run:
    runs = fastq__runsPathsProject(pipeman.project)
    cmd = """
      find -L {runs} -name '*.fastq.gz' > {output}
    """
    shell(cmd)

rule fastq__mapSamples:
  """   
  Maps all the illumina filenames' metadata in a file.
  """
  input: 
    file    = fastq__rawFiles
  output: 
    primary = fastq__mappedSamples
  run:
    """ File Output Header """
    sample_lines = [ FastqFile.fieldNames() ]
    with open(input.file, 'r') as fastq_files:
      """ Mapped Samples Lines """
      sample_lines.extend(list(map(fastq__mapFilename, fastq_files)))

    """ Write Output """
    with open(output.primary, 'a') as fmap:
      fmap.write(
        pipeman.samples.listsToSamplesheet(
          sample_lines, 
          pipeman.sampleExtensions[wildcards.extension]))


# -----------------
# Link fastq reads
# -----------------
rule fastq__linkRead:
  """
  Links original fastq file to the project directory.
  """
  input:
    fastq_read = lambda wildcards:
      fastq__mapStringSamples("{sample_path}", **wildcards)
  output: 
    primary    = fastq__chunk
  run:
    cmd = """
      ln.rel \
        {input.fastq_read} \
        {output.primary} 
    """
    texshell(**vars())

localrules: fastq__linkRead

   
# ---------
# Cleaning
# ---------
pipeman.toClean("fastq_*.done")
