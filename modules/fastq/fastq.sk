from utils import csv_helper
from utils.fastq_helper import FastqFile
from utils.files import touch
pipeman.includeModule('lims/lims.sk')
include: "fastq.py"

# -------------------------------
# Wildcards Constraints
#
# Organization of the outputs follows a convention both in the naming of the 
# files as in their directories. As such, we define regex constraints on the rules' 
# wildcards. Those wildcards are defined outside of the rules, so they are 
# global to all the rules. Each constraint can then be overridden specifically 
# in the rule itself, the last declaration prevailing.
# -------------------------------------------------------------------
pipeman.updateWildcardConstraints(
  **FastqFile.regex_fields,
  preprocesses     = "(\.\w+)*?"
)

# --------------------- 
# I/O files format
#
# Convention: 
#   - {preprocesses} should be present both in the input and output. Can be empty.
#   - {process} is only for outputs as it is about the process defined by the
#     current rule.
# --------------------- 
fastq__base_fmt = "{project}/fastq"
fastq__chunk_io = fastq__base_fmt + "/{sample_run}/{sample_name}/{sample_chunkname}{preprocesses}{sample_extension}"
fastq__raw_files_io = "{project}/fastq/raw_files.txt"
fastq__mapped_samples_io     = fastq__base_fmt + "/samples{extension}"
fastq__mapped_samples_io_dft = fastq__base_fmt + "/samples.csv"

# ---------------------
# Mapping fastq files
# ---------------------
rule fastq__mapRawFiles:
  """
  Find all the fastq files in the RUN directories specified in the 
  configuration.
  """
  input:
    metadata = lims__project_metadata_io
  output: 
    primary  = fastq__raw_files_io
  run:
    setConfigs(**wildcards)
    runs = fastq__runsPathsProject(wildcards.project)
    shell("""
      find {runs} -name '*.fastq.gz' > {output}
    """)

rule fastq__mapSamples:
  """   
  Maps all the illumina filenames' metadata in a file.
  """
  input: 
    file    = fastq__raw_files_io
  output: 
    primary = fastq__mapped_samples_io
  run:
    setConfigs(**wildcards)

    """ File Output Header """
    sample_lines = [ FastqFile.fieldNames() ]
    with open(input.file, 'r') as fastq_files:
      """ Mapped Samples Lines """
      sample_lines.extend(list(map(fastq__mapFilename, fastq_files)))

    """ Write Output """
    with open(output.primary, 'a') as fmap:
      fmap.write(
        pipeman.samples.listsToSamplesheet(
          sample_lines, 
          pipeman.sampleExtensions[wildcards.extension]))

# -----------------
# Link fastq reads
# -----------------
rule fastq__linkRead:
  """
  Links original fastq file to the project directory.
  """
  input:
    fastq_read = lambda wildcards:
      fastq__mapStringSamples("{sample_path}", **wildcards)
  output: 
    primary    = fastq__chunk_io
  shell:"""
    ln.rel {input.fastq_read} {output.primary} 
  """

rule fastq__linkReads:
  input: 
    fastq_files = lambda wildcards: 
      fastq__mapStringSamples(fastq__chunk_io, **wildcards)
  output: fastq__base_fmt + "/fastq__linkReads.done"
  run:
    touch(output)

localrules: fastq__linkRead, fastq__linkReads

# ---------------
# Fastq Quality
# ---------------
FASTQC_CORES = 6
rule fastq__fastqc_file:
  input:
      fastq_in= "{prefix}.fastq.gz"
  output:
      primary= "{prefix}.fastqc.html"
  shell:"""
    fastqc -o $(dirname {input[fastq_in]}) -t {FASTQC_CORES} {input[fastq_in]}
  """ 
