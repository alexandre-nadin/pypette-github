fastq_umi__dir = "umi-extracted"

pipeman.updateWildcardConstraints(
  procUmiExtract = f"({fastq_umi__dir}/)?",
)

pipeman.addTargets(
  fastq_umi__pipeTarget = "{fastq__pipeTarget}{fastq_umi__dir}",
  fastq__pipeTarget = "{fastq__pipeTarget}{{procUmiExtract}}",
  )

rule fastq_umi__whitelist:
  input:
    r1    = pipeman.input(fastq__read, sample_read="R1")
  output:
    wlist = f"{fastq_umi__pipeTarget}/whitelist.txt",
  run:
    umi = config.pipeline.modules.fastq.umi
    if umi.setCellNumber:
      cellNbOpt = f"--set-cell-number {umi.cellNumber}"
      plotPref  = f"{fastq_umi__pipeTarget}/estimated"
    else:
      cellNbOpt = ""
      plotPref  = f"{fastq_umi__pipeTarget}/set"
    plotPref = plotPref.format(**wildcards)

    cmd = f"""
      umi_tools whitelist            \
        --stdin {input.r1}           \
        {cellNbOpt}                  \
        --bc-pattern {umi.bcPattern} \
        --plot-prefix {plotPref}     \
        --log2stderr                 \
        > {output.wlist}
    """
    exshell(**vars())

rule fastq_umi__extract:
  input:
    r1    = pipeman.input(fastq__read, sample_read="R1"),
    r2    = pipeman.input(fastq__read, sample_read="R2"),
    wlist = pipeman.input(f"{fastq_umi__pipeTarget}/whitelist.txt")
  output: 
    r1 = pipeman.temp(f"{fastq_umi__pipeTarget}/{{sample_name}}_R1.fastq.gz"),
    r2 = pipeman.temp(f"{fastq_umi__pipeTarget}/{{sample_name}}_R2.fastq.gz")
  run:
    umi = pipeman.config.pipeline.modules.fastq.umi
    cmd = f"""
      umi_tools extract              \
        --bc-pattern {umi.bcPattern} \
        --stdin {input.r1}           \
        --stdout {output.r1}         \
        --read2-in {input.r2}        \
        --read2-out {output.r2}      \
        --filter-cell-barcode        \
        --whitelist {input.wlist}
    """
    exshell(**vars()) 

ruleorder: samples__runs > fastq_umi__whitelist > fastq_umi__extract
