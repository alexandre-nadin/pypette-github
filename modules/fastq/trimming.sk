# ------------
# Trimmomatic
# ------------
"""
Applies the trimming to the given sample in output.
Maps the existing reads R1 and R2 for the given sample in output.
Input and output files are generated depending on the existing reads.
If R2 doesn't exist, the pair end output files are still produced, empty.
They will later be dealt with as ghost files. 
This is a way of keeping the rule clean, avoiding code redundancy and
retaining the pipeline target system flexible.
"""
# HEADCROP: for QUANTSEQ, leave empty for TruSeq #
rule fastq_trimming__trimmomatic:
  input: 
    r1       = pypette.input(fastq_merge__read, sample_read="_R1"),
    r2       = pypette.input(fastq_merge__read, sample_read="_R2"),
    adapters = "adapters/trimmomatic/adapters-pe.fa"
  output: 
    r1       = pypette.temp(fastq_trimming__pipeTarget + "{sample_name}_R1.fastq.gz"),
    r1u      = pypette.temp(fastq_trimming__pipeTarget + "{sample_name}_R1_UNPAIRED.fastq.gz"),
    r2       = pypette.temp(fastq_trimming__pipeTarget + "{sample_name}_R2.fastq.gz"),
    r2u      = pypette.temp(fastq_trimming__pipeTarget + "{sample_name}_R2_UNPAIRED.fastq.gz"),
  log:
    main     = fastq_trimming__pipeTarget + "{sample_name}_trim.log"
  wildcard_constraints:
    procTrimming = "trimmed/trimmomatic/"
  run:
    inputReads = [ x for x in [ 
                     input.r1[0], 
                     input.r2[0] if input.r2 else None] 
                   if x ]
    inputString   = " \\\n".join(inputReads)

    outputReads   = [ output.r1 ]
    if input.r2:
      outputReads += [ output.r1u, output.r2, output.r2u ]

    outputString  = " \\\n".join(outputReads)

    trimmomatic   = pypette.config.pipeline.modules.fastq.trimming.trimmers.trimmomatic
    pairendedness = 'PE' if input.r2 else 'SE'
                 
    cmd = """
        trimmomatic                           \\
        {pairendedness}                       \\
        -phred33                              \\
        {inputString}                         \\
        {outputString}                        \\
        ILLUMINACLIP:{input.adapters}:2:30:10 \\
        LEADING:3                             \\
        TRAILING:3                            \\
        SLIDINGWINDOW:4:15                    \\
        MINLEN:15                             \\
        HEADCROP:{trimmomatic.headcrop}       \\
        2> {log.main}
      touch {output}
    """
    exshell(**vars())

# ---------
# Cutadapt
# ---------
rule fastq_trimming__cutadapt:
  input: 
    r1      = pypette.input(fastq_merge__read, sample_read="_R1"),
    r2      = pypette.input(fastq_merge__read, sample_read="_R2"),
    adptFwd = "adapters/cutadapt/adapters-fwd.fa",
    adptRev = "adapters/cutadapt/adapters-rev.fa"
  output: 
    r1      = pypette.temp(f"{fastq_trimming__pipeTarget}{{sample_name}}_R1.fastq.gz"),
    r2      = pypette.temp(f"{fastq_trimming__pipeTarget}{{sample_name}}_R2.fastq.gz"),
  log:
    main    = fastq_trimming__pipeTarget + "{sample_name}_trim.log"
  wildcard_constraints:
    procTrimming = "trimmed/cutadapt/"
  run:
    r1Opt      = f"-o {output.r1}" if input.r1 else ""
    r2Opt      = f"-p {output.r2}" if input.r2 else ""
    adptFwdOpt = f"-a file:{input.adptFwd}" if input.r1 else ""
    adptRevOpt = f"-A file:{input.adptRev}" if input.r2 else ""
      
    cmd = f"""
      cutadapt           \
        --trim-n         \
        -q 30,30         \
        -u 13            \
        -m 15            \
        -j 0             \
        {adptFwdOpt}     \
        {adptRevOpt}     \
        {input.r1}       \
        {input.r2}       \
        {r1Opt}          \
        {r2Opt}          \
       > "{log.main}"
      touch {output}
    """
    exshell(**vars())

# ------
# BBDUK
# ------
rule fastq_trimming__bbduk:
  input: 
    r1       = pypette.input(fastq_merge__read, sample_read="_R1"),
    r2       = pypette.input(fastq_merge__read, sample_read="_R2"),
    adapters = "adapters/bbduk/adapters-pe.fa"
  log:
    main     = fastq_trimming__pipeTarget + "{sample_name}_trim.log",
    out      = fastq_trimming__pipeTarget + "{sample_name}_trimout.log"
  output: 
    r1       = pypette.temp(fastq_trimming__pipeTarget + "{sample_name}_R1.fastq.gz"),
    r2       = pypette.temp(fastq_trimming__pipeTarget + "{sample_name}_R2.fastq.gz")
  wildcard_constraints:
    procTrimming = "trimmed/bbduk/"
  run:
    inputReads  = " \\\n".join(
      [ x for x in [ 
          "in={}".format(input.r1), 
          "in2={}".format(input.r2) if input.r2 else None] 
        if x ])
    outputReads = " \\\n".join(
      [ x for x in [
          "out={}".format(output.r1),
          "out2={}".format(output.r2) 
            if input.r2 
            else None ] 
        if x ])

    cmd = f"""
      bbduk.sh               \\
        -Xmx{config.pipeline.javaXmx} \\
        {inputReads}         \\
        {outputReads}        \\
        ref={input.adapters} \\
        k=23                 \\
        mink=11              \\
        rcomp=t              \\
        ktrim=f              \\
        kmask=X              \\
        qtrim=rl             \\
        trimq=5              \\
        forcetrimleft=0      \\
        forcetrimright2=0    \\
        overwrite=true       \\
        stats={log.main}     \\
       2> "{log.out}"
      touch {output}
    """
    exshell(**vars())

ruleorder: samples__runs > fastq_trimming__bbduk > fastq_trimming__trimmomatic > fastq_trimming__cutadapt > fastq_merging__mergeReads
