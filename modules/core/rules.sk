from utils.files import touch

core__rulesFields = ['name', 'wildcard_names', '_wildcard_constraints', 'snakefile']
rule explain_rules:
  """
  Lists all available rules (snakemake -l) but also gives more
  information such as the file in which the rule is found.
  """
  run:
    print('\t|\t'.join([_rule_field.upper() 
                       for _rule_field in core__rulesFields
                    ]))
    for _rule in rules.__dict__.keys():
      print('\t|\t'.join([str(rules.__dict__[_rule].__dict__[_rule_field]) 
                              for _rule_field in core__rulesFields
                        ]))

def helpRuleAttr(rule, attr, name=None, inline=True):
  """
  Retrieves the rule's given attribute and formats it for the help output.
  """
  val = getattr(rule, attr)
  return "  {}{}{}".format(
    name.upper() if name else attr.upper(), 
    "\n    " if inline else " ",
    #os.linesep.join([ s for s in str(val).splitlines() ])
    str(val).strip()
      .replace(" ", "  ")
      if val else val,
  )

def helpRuleMsg(rule):
  return "\n\n{}\n{}\n{}\n{}\n".format(
    helpRuleAttr(rule, "name", "rule", inline=False).strip(),
    helpRuleAttr(rule, "docstring", "doc"),
    helpRuleAttr(rule, "input"),
    helpRuleAttr(rule, "output")
  )

rule helpRule:
  """
  Lists given rule with essential attributes. 
  """
  output: "help__{name}.done"
  run:
    name_rules = [ r for r in workflow.rules if r.name==wildcards.name ]
    pipeman.log.info(helpRuleMsg(name_rules[0] if name_rules else None))
    touch(output)
  
rule help:
  """
  Lists of all available rules with essential attributes.
  """
  run:
    msg = ""
    for rule in workflow.rules:
      msg += helpRuleMsg(rule)
    pipeman.log.info(msg)

def exshell(input, output, cmd, **wildcards):
  if hasattr(config, 'debug') and config['debug']:
    shell("""
      cat << eol \
       | sed -s 's|^[[:space:]]*||' \
       > {output.primary}.debug

        INPUT:
        $(echo {input} | tr ' ' '\n')
  
        COMMAND: 
        {cmd}
  
        OUTPUT:
        $(echo {output} | tr ' ' '\n')
eol

      touch {output}

    """)                                      
  else:
    shell(cmd)                                

pipeman.toClean("help__*.done")
