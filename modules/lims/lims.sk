import utils.dicts
from utils.files import touch

def lims__setConfigs(**kwargs):
  """
  Not elegant way to deal with config files.
  Should set dependence to cluster.yaml (retreived in metadata.json)
  Loads metadata.json.
  """

  """ Load configurations for cluster, project and pipeline """
  confs = [  "cluster.yaml", "pipeline.yaml", "metadata.json" ]
  for conf in confs:
    pipeman.config_manager.loadConfig(conf)

# -----------------
# LIMS Parameters
# -----------------
lims__SRV_URL      = "f2.ricerca.hsr.it"
lims__PRJ_URL      = lims__SRV_URL      + "/projects"
lims__SEQU_RUN_URL = lims__PRJ_URL      + "/api/sequencing_run"
lims__TO_DEMUX_URL = lims__SEQU_RUN_URL + "/to_demultiplex/"

# ---------------
# Metadata file
# ---------------
lims__project_medata_io_format = "json"
lims__project_metadata_io = (
  "metadata.{format}"
    .format_map(utils.dicts.Default(
      { 'format': lims__project_medata_io_format,},
      nomissing=False))
)
lims__create_project_io = "lims__createProject.done"

rule lims__projectMetadata:
  output: 
    primary = lims__project_metadata_io
  shell:"""
    curl                                                                      \
      --fail                                                                  \
      "{lims__PRJ_URL}/{pipeman.project}.{lims__project_medata_io_format}" \
     > {output.primary}
  """

rule lims__tempConfs:
  """
  This should be taken form the lims.
  Not implemented yet in lims API.
  """
  output:
    primary = "{conf}.yaml"
  shell:"""
    cp "{pipeman.dir_modules}/lims/{wildcards.conf}.yaml" \
       "{output.primary}"
  """
rule lims__createProject:
  """
  Creates Project. Not different from rule 'lims__projectMetadata'.
  """
  input:
    primary      = lims__project_metadata_io,
    tempCluster  = "cluster.yaml",
    tempPipeline = "pipeline.yaml"
  output:
    lims__create_project_io
  run:
    touch(output)
    
pipeman.toClean("lims__*.done")
