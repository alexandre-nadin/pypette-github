include: 'fastq.sk'

## Pattern for chunk bams
out_chunk_bam_pattern="{sample_run}/{sample_name}/{sample_name}_{sample_number}_{sample_lane}_{sample_chunknb}"

# ------------
# Merge BAMs
# ------------
chunks_path_format="{sample_run}/{sample_name}/{sample_name}_{sample_number}_{sample_lane}_{sample_chunknb}"

MERGE_CMD = "condactivate; picard MergeSamFiles"
rule bam__merge_sample_bam_chunks:
    input:
        bam= lambda wildcards: cmap__format_str_from_query_dict(
                  csvmap=cmap, 
                  str_format=chunks_path_format + '{preprocesses}.bam',
                  **wildcards)
    output:
        primary= "BAM/{sample_name}{preprocesses}{process}.bam",
        bai= "BAM/{sample_name}{preprocesses}{process}.bai"
    wildcard_constraints:
        process="(\.merged)?"
    run:
        shell("""
          mkdir -p BAM  # > {o[primary]}.log # DRY_RUN
          if [[ `wc -w <<<"{i[bam]}"` -gt 1 ]]; then
            {merge_command} {merge_prefixes} \
              O={o[primary]} \
              CREATE_INDEX=true \
              MSD=true \
              TMP_DIR=$TMPDIR \
              VALIDATION_STRINGENCY=SILENT \
             > {o[primary]}.log
          else
              link_install {i[bam]} {o[primary]} # >> {o[primary]}.log # DRY_RUN
              ORIG_BAI=$(sed 's/bam/bai/g' <<< {i[bam]})
              echo "[DOING else]"
              [ -e $ORIG_BAI ] \
                && link_install -f $ORIG_BAI $(sed 's/bam/bai/g' <<< {o[primary]}) \
                || echo WARNING bai file $ORIG_BAI not found \ 
                >&2 # >> {o[primary]}.log # DRY_RUN
          fi  
        """.format(i=input, o=output, merge_command=MERGE_CMD, merge_prefixes=" ".join([ "I=" + _prefix for _prefix in input.bam ])))

rule bam__all_bam_chunks:
    input: 
        cmap= fastq_samples_map,
        bams= lambda wildcards: cmap__format_str_from_query_dict(
                  csvmap=cmap, 
                  str_format="BAM/{sample_name}{preprocesses}.bam", 
                  **wildcards)
    output: 
        primary= "all_bam_chunks{preprocesses}.done"
    shell:"""
      touch {output}
    """
