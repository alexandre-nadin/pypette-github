# ----------------
# BWA  alignment
# ----------------
# Align Parameters
# snakemake -p RULE/FILE --use-conda # --cluster 'qsub' --jobs 9999 --latency-wait 10
#snakemake -p run2/36258535_id/36258535_id_S10_L5_001.bam --cluster-config cluster.yaml  --cluster 'qsub -N {cluster.name} -l select={cluster.select}:ncpus={cluster.cores}:mem={cluster.mem}' --jobs 9999  --latency-wait 10
include: 'bam.sk'
BWA_CORES = 6
BWA_REFERENCE_GENOME = ""

#ruleorder: bwa__align_bwa_mem_samtools > bwa__align_bwa_mem_picard 
ruleorder: bwa__align_bwa_mem_picard > bwa__align_bwa_mem_samtools
rule bwa__align_bwa_mem_samtools:
    input:
        # samples_map = fastq_samples_map,
        fastq_reads= lambda wildcards: cmap__format_str_from_query_dict(
                  csvmap=cmap, 
                  str_format="{sample_run}/{sample_name}/{sample_chunkname}",
                  out_suffix="{preprocesses}.fastq.gz",
                  query_dict=wildcards)
    output: 
        primary = out_chunk_bam_pattern + "{preprocesses}{process}.bam"
    wildcard_constraints:
         process="(\.bwa_mem_samtools)?"
    shell:"""
       # echo PBS -N bwamem -l select=1:ncpus=$(CORES)
       condactivate #> {output[primary]}.out ## DRY_RUN
       bwa mem -M \
         -t {BWA_CORES} \
         {BWA_REFERENCE_GENOME} \
         {input[fastq_reads]} \
         | samtools view -Su - \
         | samtools sort -o {output[primary]}
     """

PICARD_SORTSAM_SORT_ORER = 'unsorted' # [ 'unsorted', 'queryname', 'coordinate', 'duplicate', 'unknown']
rule bwa__align_bwa_mem_picard:
    input:
        fastq_reads= lambda wildcards: cmap__format_str_from_query_dict(
                  csvmap=cmap, 
                  str_format="{sample_run}/{sample_name}/{sample_chunkname}",
                  out_suffix="{preprocesses}.fastq.gz",
                  query_dict=wildcards)
    output: 
        primary = out_chunk_bam_pattern + "{preprocesses}{process}.bam"
    wildcard_constraints:
         process="(\.bwa_mem_picard)?"
    shell:"""
       # echo PBS -N bwamem -l select=1:ncpus=$(CORES)
       condactivate #> {output[primary]}.out ## DRY_RUN
       bwa mem -M \
         -t {BWA_CORES} \
         {BWA_REFERENCE_GENOME} \
         {input[fastq_reads]} \
        | picard SortSam \
            I=/dev/stdin \
            SORT_ORDER={PICARD_SORTSAM_SORT_ORER} \
            O={output[primary]}
     """
