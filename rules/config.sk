import os
import sys 
import subprocess
#sys.path.insert(0, CTGB_PIPE_DIR + "/python-lib") # TODO: make python package and install from conda/pip
sys.path.insert(0, "../../../local/ctgb-pipe/python-lib") # TODO: make python package and install from conda/pip.

def lshell(command, allow_empty_lines=False):
    #
    # Returns the output of a given shell command in an array.
    # Each element is an output line.
    # Filters empty strings by default.
    #
    out = subprocess.check_output(command, shell=True).decode().split(os.linesep)
    return out if allow_empty_lines else [ _elem for _elem in out if _elem ] 

def cmap__format_str_from_query_dict(csvmap, str_format="", **query_dict):
    #
    # Queries a CSVMap object based on a given dictionary.
    #
    return set([ str_format.format(**_cmap)
                 for _cmap in cmap.query_dict(**query_dict)
               ])

PBS_DIR = 'pbs'
PAIRED = 'Y'

# --------------------- 
# I/O files format
#
# Convention: 
#   - {preprocesses} should be present both in the input and output. Can be empty.
#   - {process} is only for outputs as it is about the process defined by the
#     current rule.
# --------------------- 
chunks_path_format="{sample_run}/{sample_name}/{sample_name}_{sample_number}_{sample_lane}_{sample_chunknb}{preprocesses}"
chunk_fastq_format="{sample_run}/{sample_name}/{sample_chunkname}{preprocesses}"
chunk_bam_format="{sample_run}/{sample_name}/{sample_name}_{sample_number}_{sample_lane}_{sample_chunknb}{preprocesses}"
merged_bam_format="BAM/{sample_name}{preprocesses}"


# -------------------------------
# Wildcards Constraints
#
# Organization of the outputs follows a convention both in the naming of the 
# files as teir directories. As such, we define regex constraints on the rules' 
# wildcards. Those wildcards are defined outside of the rules, so they are 
# global to all the rules. Each constraint can then be overritten specifically 
# in the rule itself.
# -------------------------------------------------------------------
wildcard_constraints:
    sample_name=fh.FastqFile.fields_regex_dic['sample_name'],
    sample_number=fh.FastqFile.fields_regex_dic['sample_number'],
    sample_lane=fh.FastqFile.fields_regex_dic['sample_lane'],
    sample_chunknb=fh.FastqFile.fields_regex_dic['sample_chunknb'],
    sample_read=fh.FastqFile.fields_regex_dic['sample_read'],
    preprocesses="(\.\w+)*?"


# -----------------------------
# Import all available modules
# -----------------------------
# Includes all available modules that are not Snakemake configuration files
#
import glob
snakemake_modules = [ _sk for _sk in glob.glob(CTGB_PIPE_DIR + "/rules/mapping/*.sk")
                        if not _sk.endswith('_config.sk')
                    ]
for _sk_module in snakemake_modules:
    include: _sk_module
