## TOREMOVE
import subprocess
def lshell(command, allow_empty_lines=False):
    #
    # Returns the output of a given shell command in an array.
    # Each element is an output line.
    # Filters empty strings by default.
    #
    out = subprocess.check_output(command, shell=True).decode().split(os.linesep)
    return out if allow_empty_lines else [ _elem for _elem in out if _elem ] 

configfile: "../f2-metadata.yaml"

####
BIT_PROJECT = config['project']['name'] # OPERATOR :=  # AUTOMATIC
RAW_DATA_PROJECT = "Project_" + BIT_PROJECT # OPERATOR :=  # AUTOMATIC
#e.g. Project_Martignani_343_RNASeq
PROJECT_NUMERIC_ID = 'VALORIZE_IN_MAKEFILE'  # OPERATOR :=  # AUTOMATIC
#the id of the prj from Asana, e.g. 343
PRJ_VERSION = os.path.basename(os.path.dirname(os.path.abspath(os.curdir))) #'VALORIZE_IN_MAKEFILE' # OPERATOR :=  # AUTOMATIC
#cannot use $$(basename `pwd`) since this makefile is also loaded in single run directory
RUN_IDS = config['run_ids'] #'VALORIZE_IN_MAKEFILE' # OPERATOR :=  # AUTOMATIC
  # if you have a METADATA_FILE you can use 
  # RUN_IDS=shell(""" bawk '{print $run}' {METADATA_FILE} | unhead | sort | uniq""")

## Added variables for Snakemake
BIOINFO_ROOT = os.environ['BIOINFO_ROOT']
PRJ_ROOT = BIOINFO_ROOT + '/prj/' + BIT_PROJECT

## Sequencing protocol
STRANDED = 'VALORIZE_IN_MAKEFILE' # OPERATOR :=  # AUTOMATIC
#NB: STRANDED can be: 0=NO, 1=yes-FORWARD, 2=yes-REVERSE
PAIRED = config['paired'] # OPERATOR :=  # AUTOMATIC?
#ACTUALLY PAIRED END SEQUNCING IS NOT SUPPORTED
#QUANTSEQ = 'Y'       #usually not used
#PAIRED and QUANTSEQ value can be 'Y' or 'N'

##Genome annotation
SPECIES = config['species'] # OPERATOR :=  # AUTOMATIC
#e.g. 'SPECIES = 'mmusculus'' # OPERATOR :=
#e.g. 'SPECIES = 'hsapiens''  # OPERATOR := 
ERCC = 'VALORIZE_IN_MAKEFILE' # OPERATOR := 
#ERCC = '.ERCC_QUANTSEQ' #?=
# NB: ERCC variable: do NOT comment but leave empty if not required. IF required, you need to generate the 'SPECIES+ERCC' sub_version in BiT task/annotations SPECIFIC FOR YOUR CASE

GENCODE_VERSION = config['gencode']['version'] # OPERATOR :=  # AUTOMATIC?
#e.g. '25' for hsapiens, 'M11' for mmusculus
GENCODE_GENOME_VERSION = config['gencode']['genome_version'] # OPERATOR :=
#e.g. 'GRCh38' for hsapiens, 'GRCm38' for mmusculus

## Enrichment
GO_TREE_VERSION = 'VALORIZE_IN_MAKEFILE'  # OPERATOR :=
#e.g. see in $(BIOINFO_ROOT)/task/annotations/dataset/GO/geneontology.org/
ENSEMBL_VERSION = 'VALORIZE_IN_MAKEFILE'  # OPERATOR :=
#e.g. '86'

##Trimming #TODO: these parameters are for cutadapt we are now in the process of moving towards trimmomatic
TRIMMED = '.trimmomatic' # also .trimmed_cutadapt
CUT_ADAPTERS = ' -b file:adapters.fa'
TRIM_Q = '-q 30,30'
TRIM_CUT = '-u 13'
TRIM_MIN_LEN = '-m 15'
#let TRIM_MIN_LEN always set to avoid read without sequence after trimming

## STAR:
STAR_outFilterMismatchNmax=10    # 10=STAR default, 14 is something that works for QUANTSEQ #

# Trimmomatic parameters
TRIMMOMATIC_HEADCROP = ''
TRIMMOMATIC_RAM = '10gb'     # *in GB* 
TRIMMOMATIC_RAM_JAVA = '10240M'    # *in MB; = TRIMMOMATIC_RAM*1024*
TRIMMOMATIC_PAIRED = 'PE' if PAIRED in ['Y', True] else 'SE'
#TRIMMOMATIC_HEADCROP = 'HEADCROP:12'        # for QUANTSEQ, leave empty for TruSeq #

## STAR:
#TAR_outFilterMismatchNmax = 10    #10=STAR default, 14 is something that works for QUANTSEQ#

## DGE:
DGE_TOOL = 'VALORIZE_IN_MAKEFILE'  # OPERATOR :=

## Limma:
LIMMA_CONTRASTS = 'VALORIZE_IN_MAKEFILE'  # OPERATOR :=
#e.g. LIMMA_CONTRASTS = ["(KO.ND+KO.HFD)-(WT.ND+WT.HFD)" "(WT.HFD+KO.HFD)-(WT.ND+KO.ND)" "(KO.HFD-KO.ND)-(WT.HFD-WT.ND)" "(WT.HFD-WT.ND)" "(KO.HFD-KO.ND)" "(KO.ND-WT.ND)" "(KO.HFD-WT.HFD)"] # OPERATOR :=
#e.g. LIMMA_CONTRASTS = ["KO-WT"] # OPERATOR := LIMMA_CONTRASTS_NAMES:=VALORIZE_IN_MAKEFILE # OPERATOR :=

LIMMA_CONTRASTS_NAMES = 'VALORIZE_IN_MAKEFILE' # OPERATOR :=
#e.g. LIMMA_CONTRASTS_NAMES = ['genotype', 'diet', 'interaction', 'wt_diet', 'ko_diet', 'nd_genotype', 'hfd_genotype'] # OPERATOR :=
LIMMA_DESIGN_FORMULA = 'VALORIZE_IN_MAKEFILE' # OPERATOR :=
#e.g. LIMMA_DESIGN_FORMULA = "~0+condition" # OPERATOR :=
LIMMA_FACTORS = 'VALORIZE_IN_MAKEFILE' # OPERATOR :=
#NB: do not comment LIMMA_FACTORS but leave empty if not required
#e.g. LIMMA_FACTORS = '-f "genotype treatment"' # OPERATOR :=
MIN_NUM_OF_EXPRESSED_SAMPLE = 'VALORIZE_IN_MAKEFILE'  # OPERATOR :=


# ------------------------      
#   Report R MarkDown RMD        
# ------------------------ 
RMD_RPKM = 'VALORIZE_IN_MAKEFILE'
#e.g. 'log.norm.rpkm_unfiltered.rda'
RMD_MIN_NUM_OF_EXPRESSED_SAMPLE = MIN_NUM_OF_EXPRESSED_SAMPLE
RMD_ESET = 'eset.rda'
RMD_PCA_INTGROUP_COLOR = 'VALORIZE_IN_MAKEFILE'
# e.g. "condition", whit the double quotes   # SUGGESTION: there were not any double-quote to begin with... 
RMD_PCA_INTGROUP_SHAPE = 'VALORIZE_IN_MAKEFILE'
# e.g. NULL; or "stage", whit the double quotes
RMD_STANDARD_CONTROL = 'TRUE' # SUGGESTION: Use python s boolean as value: True
RMD_PROJECT_CONTROL = 'VALORIZE_IN_MAKEFILE'
# TRUE or FALSE
RMD_STANDARD_CONTROL_GENES = PRJ_ROOT + '/local/share/data/standard.controls.' + SPECIES + '.txt'
RMD_PROJECT_CONTROL_GENES = PRJ_ROOT + '/local/share/data/project.controls.txt'
RMD_METADATA_HEATMAP = 'VALORIZE_IN_MAKEFILE'
#Must be in double quotes and comma separated, without spaces, e.g.: "condition","stage"
# cause it is going to be substituted in: annotation.use<-pData(eset)[,c(${RMD_METADATA_HEATMAP})]
RMD_DISPLAY_NUMBERS_STANDARD_CTRL_HEATMAP = 'F'
RMD_DISPLAY_NUMBERS_PRJ_CTRL_HEATMAP = 'F'
# T or F
RMD_BOXPLOT_FACTOR = 'VALORIZE_IN_MAKEFILE'
# e.g. condition
RMD_STRIPCHART_FACTOR = 'VALORIZE_IN_MAKEFILE'
# Can be =$(RMD_BOXPLOT_FACTOR) or another of the metadata factors
RMD_BIOTYPE = 'TRUE'  # SUGGESTION: Use python s boolean as value:
#TRUE or FALSE, if TRUE RMD_BIOTYPE_PNG must point to an existent file
RMD_BIOTYPE_PNG = 'biotypes/biotypes_summary.png' if RMD_BIOTYPE == 'TRUE' else None
# normally RMD_BIOTYPE_PNG=biotypes/biotypes_summary.png

## Visualization
# NB: UCSC_VERSION is being used also elsewhere as SPECIES info
UCSC_VERSION = 'VALORIZE_IN_MAKEFILE' # OPERATOR :=
# e.g hg19, mm10
REFERENCE_BED12 = 'VALORIZE_IN_MAKEFILE'  # OPERATOR :=
#for human: REFERENCE_BED12=/lustre1/genomes/$(UCSC_VERSION)/annotation/$(UCSC_VERSION)_gencode24_basic.bed     * should generate the updated gencode27 *
#for mouse: /lustre1/genomes/$(UCSC_VERSION)/annotation/$(UCSC_VERSION).ensGene.bed

browser_position = 'VALORIZE_IN_MAKEFILE' # OPERATOR := 
# normally the position of a gene of interest to be visualized on ucsc genome browser
#e.g. browser_position=chr22:49282960-49359379
EXT_bigDataUrl_PREFIX = 'http://192.167.192.110/shared_data/shared/' \
     + BIT_PROJECT + '/dataset/' + PRJ_VERSION


# ----------------------
# Snakemake declarations
# ----------------------
PBS_DIR = 'pbs'
