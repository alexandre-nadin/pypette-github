# ----------
# Foreword
# ----------

The Snakemake official documentation is your best ressource and it will often be referred to in this tutorial. You can find it here: https://snakemake.readthedocs.io/en/stable/. Instead of learning all the documentation content in a straighforward way, this tutorial actually aims at guiding you through practical examples. You will directly learn all the minimum basics that will be useful for writing pieces of our pipeline.

Requirements: Basic knowledge of the shell (bash), basic knowledge of python, smiling.


For this tutorial you can either install Snakemake on your local machine (I recommend installing it with conda) or log to the cluster and use the version available there.

# -------------
# Quick setup
# -------------
- Log in the cluster
- Enter a node (1 core)
- Go to your home folder.
- Create a directory for this snakemake tutorial
- Activate the snakemake environment: $ condactivate snakemake
- Create a "Snakefile" file.

# -------------------------
# Rules and keywords
# -------------------------
- Write a rule which prints 'Hello world'

- Execute the rule. For that you give Snakemake the name of the rule to execute.

- Look for distinction between 'run' and 'shell' keyword

- Write a rule which prints "Hello from shell' using the 'shell' keyword (if nto already done)

- Execute the rule

- Write rule which prints "Hello from python' using the 'run' keyword

- Execute the rule

- Write rule which prints the two above messages using both the 'run' and 'shell' keywords.

- Execute that rule. It should fail. Read the error message. 'shell' and 'run' are mutually exclusive keywords. Comment one of the two block to make Snakemake work.

- Find a way to print "Hello from Python Shell!" from the shell, but inside a 'run' block (Hint: There is a python Snakemake function for that)

- Look at your rule names. Would someone else be able to guess what they do simply looking at their names? Show them to a colleague.

# --------------
# Target files
# -------------------
- Maybe you are already tired of writing "snakemake" to do your tests. Shell aliases are your friends (e.g. $ alias sm="snakemake"; $ sm --help)

- Write a rule which creates the file "sample_A.txt" in a shell block (touch the file for this)

Here you finally defined a target output explicitely with the 'output' keyword. At this point it might be good to call the target name you expect to produce, instead of the rule name.

- Execute "sample_A.txt" and check the file has been created.

In a Snakemake recipe block (run, shell, blocks that allow you to create the output file), you have access to the rule's variables: output (which is a python array), input (python array), wildcards (python dictionnary), rule (rule name). In a python block (run), you acces them as is:
  print(output)
In a string, you access them as dictionnary keyword:
  print(f"First input: {input[0]})
  shell("""
    echo "Rule name: {rule}"
  """)


- Modify the rule to write the rule name in the output file (you can redirect the output of the echo command in the output).
 
- Execute the target and check you have the rule name printed in the output file. It should be empty.

- Read the output Snakemake gave you: "Nothing to be done". That is because we already created the file once, and Snakemake is happy with that. TO update the file, we actually have to tell Snakemake we want to reproduce it.

- Read the Snakemake command help and look for the option to force the target creation  ($ snakemake --help)

- Execute the target and chekc you have the rule name printed in the output file.

- Modify the rule to have the rule and the letter 'A' written in the target file: "Rule: {rule} A"

- Execute the target and check you have both the rule name and the letter 'A' written inside.

- We defined the target file name in the output. But did we actually write "sample_A.txt" in the recipe? If so, replace it with the {output} variable. Same with the rule name {rule}. We aim at efficiency, reducing maintainability time and redundancy.

# ---------------------
# Conflicting targets
# ---------------------
- Write a rule to create "sample_A.txt" from python shell (in a run block). As above, write the rule name and the letter 'A' in it.

- Execute the target. It should fail.

- Read the Snakemake error message: You have two rules that create the same target, Snakemake can't decide which one to execute.

- Read the rule_order section from the Snakemake manual.

- Set  your rule order, giving the first rule priority.

- Execute the target, and check you have the new rule name printed in it. Else check your rule order.

